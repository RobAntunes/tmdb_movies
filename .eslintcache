[{"/home/boss/movie_list/src/index.tsx":"1","/home/boss/movie_list/src/reportWebVitals.ts":"2","/home/boss/movie_list/src/App.tsx":"3","/home/boss/movie_list/src/components/Movies/Movies.tsx":"4","/home/boss/movie_list/src/components/Movies/MovieList/MovieList.tsx":"5","/home/boss/movie_list/src/components/Movies/MovieList/Movie/Movie.tsx":"6","/home/boss/movie_list/src/components/Sidebar/Sidebar.tsx":"7","/home/boss/movie_list/src/components/Sidebar/GenreCheckboxList/GenreCheckBoxList.tsx":"8","/home/boss/movie_list/src/components/Sidebar/GenreCheckboxList/GenreCheckBox/GenreCheckbox.tsx":"9","/home/boss/movie_list/src/helpers/manipulateMovies.ts":"10"},{"size":502,"mtime":1610965742245,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1610457873237,"results":"13","hashOfConfig":"12"},{"size":2536,"mtime":1611217877787,"results":"14","hashOfConfig":"12"},{"size":269,"mtime":1611134910870,"results":"15","hashOfConfig":"12"},{"size":1873,"mtime":1611194645649,"results":"16","hashOfConfig":"12"},{"size":2808,"mtime":1611195121359,"results":"17","hashOfConfig":"12"},{"size":3542,"mtime":1611221417487,"results":"18","hashOfConfig":"12"},{"size":497,"mtime":1611135744810,"results":"19","hashOfConfig":"12"},{"size":1582,"mtime":1611187955689,"results":"20","hashOfConfig":"12"},{"size":712,"mtime":1611160874339,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1nmepki",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/boss/movie_list/src/index.tsx",[],["46","47"],"/home/boss/movie_list/src/reportWebVitals.ts",[],"/home/boss/movie_list/src/App.tsx",[],"/home/boss/movie_list/src/components/Movies/Movies.tsx",[],"/home/boss/movie_list/src/components/Movies/MovieList/MovieList.tsx",["48"],"import React, { useContext, useEffect, useState } from \"react\";\n\nimport { IMovie } from \"../common/Movies.types\";\n\nimport Movie from \"./Movie/Movie\";\n\nimport { MovieContext } from \"../../../App\";\nimport {\n    filterMoviesByGenre,\n    filterMoviesByRating,\n    moviesByPopularity\n} from \"../../../helpers/manipulateMovies\";\n\nconst MovieList: React.FC = () => {\n    const [movies, setMovies] = useState<IMovie[]>();\n\n    const movieContext = useContext(MovieContext);\n    const { nowPlaying, filters } = movieContext;\n\n    useEffect(() => {\n        // TODO: Figure out nice simple abstraction to make this dynamic.\n        let movies: IMovie[] = [...nowPlaying];\n\n        // Check if we have an active conditional filter\n        const flag = conditionalFilterCheck(filters);\n\n        // Filter pipeline\n        if (flag) {\n            // Conditional filters\n            movies = filterMoviesByGenre(\n                nowPlaying,\n                filters.selectedGenres\n            )\n        }\n        else {\n            movies = moviesByPopularity(nowPlaying);\n        }\n        // Permanent filters\n        movies = filterMoviesByRating(\n            movies,\n            filters.minimumRating\n        )\n        setMovies(movies);\n    }, [movieContext.filters])\n\n    return (\n        <>\n            {(movies)\n                ? movies.map((movie: IMovie) => {\n                    return <Movie {...movie} {...movieContext.imageInfo} />\n                })\n                : null}\n        </>\n    )\n\n    function conditionalFilterCheck(filters: { [key: string]: any }) {\n        return Object.values(filters).every((filter) => {\n            if (filter instanceof Object) {\n                if (Object.values(filter).length > 0) {\n                    return true;\n                }\n            }\n            return filter ? true : false;\n        })\n    }\n}\n\nexport default MovieList;","/home/boss/movie_list/src/components/Movies/MovieList/Movie/Movie.tsx",["49"],"import React, { useEffect, useRef } from \"react\";\n\nimport { APIGenre, MovieWithImageInfo } from \"../../common/Movies.types\";\n\nimport { MovieContext } from \"../../../../App\";\n\nconst Movie: React.FC<MovieWithImageInfo> = (props) => {\n    const movieRef = useRef<HTMLDivElement | null>(null);\n\n    const baseURL = props.images.base_url;\n    const path = props.poster_path;\n    const posterSizes = props.images.poster_sizes;\n\n    useEffect(() => {\n        // Could be updated to be responsive and return higher res images\n        // on resize\n        const movieElem = movieRef?.current;\n        if (movieElem) {\n            const splash = constructImageURL(\n                baseURL,\n                path,\n                movieElem.clientWidth,\n                posterSizes\n            )\n            movieElem.style.backgroundImage = `url(${splash})`;\n        }\n    }, [props, movieRef.current])\n\n    return (\n        <div className=\"movie\" >\n            <div className=\"splash\" ref={movieRef}></div>\n            <div className=\"movie_info\">\n\n                <p className=\"title\">{props.title}</p>\n                <div className=\"genres\">{\n                    <MovieContext.Consumer>\n                        {(data) => {\n                            return getGenresAsString(data.allGenres, props.genre_ids);\n                        }}\n                    </MovieContext.Consumer>\n                }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction getGenresAsString(genres: APIGenre[], genreIDs: number[]): React.ReactNode {\n    const genreStr = genreIDs.reduce(\n        (acc, curr) => {\n            acc += `${genres.find(\n                (genre) => (genre.id === curr)\n            )?.name}, `\n            return acc;\n        }, ``)\n    return <div>{genreStr.trim().slice(0, -1)}</div>\n}\n\n// This could be tweaked to handle finding the correct size for any style\n// of image needed (Poster, Backdrop, etc...)\nfunction constructImageURL(\n    baseURL: string,\n    path: string,\n    width: number,\n    posterSizes: string[]\n): string | void {\n    const size: string = getSuitableImageSizeForPosters(\n        width, posterSizes\n    );\n    return `${baseURL}${size}${path}`;\n}\n\nfunction getSuitableImageSizeForPosters(\n    width: number, posterSizes: string[]\n) {\n    // Doesn't allow for retrieval of original image size\n    const suitableSizes = posterSizes\n        .filter((size) => {\n            // API uses size as part of path hence providing the value\n            // as a string and prefixed with a \"w\"\n            const wNum = +size.split(\"w\")[1];\n            // no fallback if none is found\n            return wNum >= width * 0.6 && wNum <= width * 1.4\n        });\n    // Returns largest valid/workable size\n    return suitableSizes[suitableSizes.length - 1];\n}\n\nexport default Movie;","/home/boss/movie_list/src/components/Sidebar/Sidebar.tsx",["50"],"/home/boss/movie_list/src/components/Sidebar/GenreCheckboxList/GenreCheckBoxList.tsx",["51","52","53","54"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { APIGenre } from \"../../Movies/common/Movies.types\";\n\nimport GenreCheckBox from \"./GenreCheckBox/GenreCheckbox\";\n\nconst GenreCheckBoxList: React.FC<{ genres: APIGenre[] }> = ({ genres }) => {\n    return (\n        <div className=\"checkboxes\">\n            {genres && genres.map((genre) => {\n                return <GenreCheckBox genre={genre} />\n            })}\n        </div>\n    )\n}\n\nexport default GenreCheckBoxList;","/home/boss/movie_list/src/components/Sidebar/GenreCheckboxList/GenreCheckBox/GenreCheckbox.tsx",[],"/home/boss/movie_list/src/helpers/manipulateMovies.ts",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":44,"column":8,"nodeType":"61","endLine":44,"endColumn":30,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":27,"column":8,"nodeType":"61","endLine":27,"endColumn":33,"suggestions":"64"},{"ruleId":"59","severity":1,"message":"65","line":33,"column":8,"nodeType":"61","endLine":33,"endColumn":22,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":27},{"ruleId":"67","severity":1,"message":"71","line":1,"column":29,"nodeType":"69","messageId":"70","endLine":1,"endColumn":38},{"ruleId":"67","severity":1,"message":"72","line":1,"column":40,"nodeType":"69","messageId":"70","endLine":1,"endColumn":46},{"ruleId":"67","severity":1,"message":"73","line":1,"column":48,"nodeType":"69","messageId":"70","endLine":1,"endColumn":56},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filters' and 'nowPlaying'. Either include them or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has missing dependencies: 'baseURL', 'path', and 'posterSizes'. Either include them or remove the dependency array. Mutable values like 'movieRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["77"],"React Hook useEffect has missing dependencies: 'getNowPlayingGenres' and 'nowPlayingGenres'. Either include them or remove the dependency array.",["78"],"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [filters, movieContext.filters, nowPlaying]",{"range":"85","text":"86"},"Update the dependencies array to be: [props, baseURL, path, posterSizes]",{"range":"87","text":"88"},"Update the dependencies array to be: [getNowPlayingGenres, movieContext, nowPlayingGenres]",{"range":"89","text":"90"},[1233,1255],"[filters, movieContext.filters, nowPlaying]",[864,889],"[props, baseURL, path, posterSizes]",[828,842],"[getNowPlayingGenres, movieContext, nowPlayingGenres]"]